{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/Toggler/Toggler.module.css","components/ContactListItem/ContactListItem.module.css","components/ContactList/ContactList.module.css","components/Layout/Layout.module.css","redux/contacts/contactsActions.js","redux/contacts/contactsReducer.js","redux/theme/themeActions.js","redux/theme/themeReducer.js","redux/store.js","redux/contacts/contactsSelectors.js","redux/contacts/contactsOperations.js","components/ContactForm/ContactForm.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","components/Filter/Filter.js","context/ThemeContext.js","redux/theme/themeSelectors.js","components/Layout/Layout.js","components/Toggler/Toggler.js","App.js","AppContainer.js","index.js"],"names":["module","exports","addContactRequest","createAction","addContactSuccess","addContactError","fetchContactsRequest","fetchContactsSuccess","fetchContactsError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","contacts","createReducer","contactsActions","state","action","payload","filter","contact","id","loading","combineReducers","toggleTheme","theme","isChecked","themeConfig","themeActions","store","configureStore","reducer","contactsReducer","themeReducer","middleware","getDefaultMiddleware","logger","getContacts","getFilter","getLoading","getVisibleContacts","createSelector","name","toLowerCase","includes","axios","defaults","baseURL","addContact","number","dispatch","post","then","res","data","catch","error","fetchContacts","get","deleteContact","delete","ContactForm","handleChange","target","value","setState","handleSubmit","e","preventDefault","props","some","toast","configure","onAddContact","reset","this","onSubmit","className","styles","form","formLabel","formInput","type","onChange","disabled","length","Component","mapDispatchToProps","contactsOperations","connect","contactsSelectors","ContactListItem","onDeleteContact","item","btn","onClick","list","map","key","onChangeFilter","fontColor","bodyBg","React","createContext","themeSelectors","children","style","background","color","container","Toggler","themeSelector","label","switch","checked","slider","AppContainer","onFetchContacts","isLoadingContacts","ReactDOM","render","document","getElementById"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,KAAO,0BAA0B,UAAY,+BAA+B,UAAY,iC,mBCA1GD,EAAOC,QAAU,CAAC,cAAgB,+BAA+B,MAAQ,uBAAuB,OAAS,wBAAwB,OAAS,0B,mBCA1ID,EAAOC,QAAU,CAAC,KAAO,8BAA8B,IAAM,+B,mBCA7DD,EAAOC,QAAU,CAAC,KAAO,4B,mBCAzBD,EAAOC,QAAU,CAAC,UAAY,4B,4KCef,GACbC,kBAfwBC,YAAa,uBAgBrCC,kBAfwBD,YAAa,uBAgBrCE,gBAfsBF,YAAa,qBAgBnCG,qBAd2BH,YAAa,yBAexCI,qBAd2BJ,YAAa,yBAexCK,mBAdyBL,YAAa,uBAetCM,qBAb2BN,YAAa,0BAcxCO,qBAb2BP,YAAa,0BAcxCQ,mBAbyBR,YAAa,wBActCS,aAZmBT,YAAa,oBCF5BU,EAAWC,YAAc,IAAD,mBAC3BC,EAAgBR,sBAAuB,SAACS,EAAOC,GAAR,OAAmBA,EAAOC,WADtC,cAE3BH,EAAgBX,mBAVA,SAACY,EAAOC,GACzB,MAAM,GAAN,mBAAWD,GAAX,CAAkBC,EAAOC,aAOG,cAG3BH,EAAgBL,sBAPG,SAACM,EAAOC,GAC5B,OAAOD,EAAMG,QAAO,SAAAC,GAAO,OAAIA,EAAQC,KAAOJ,EAAOC,cAGzB,IAMxBC,EAASL,YAAc,GAAD,eACzBC,EAAgBH,cAAe,SAACI,EAAOC,GAAR,OAAmBA,EAAOC,YAGtDI,EAAUR,aAAc,GAAD,mBAC1BC,EAAgBT,sBAAuB,kBAAM,KADnB,cAE1BS,EAAgBR,sBAAuB,kBAAM,KAFnB,cAG1BQ,EAAgBP,oBAAqB,kBAAM,KAHjB,cAI1BO,EAAgBb,mBAAoB,kBAAM,KAJhB,cAK1Ba,EAAgBX,mBAAoB,kBAAM,KALhB,cAM1BW,EAAgBV,iBAAkB,kBAAM,KANd,cAO1BU,EAAgBN,sBAAuB,kBAAM,KAPnB,cAQ1BM,EAAgBL,sBAAuB,kBAAM,KARnB,cAS1BK,EAAgBJ,oBAAqB,kBAAM,KATjB,IAYdY,cAAgB,CAC7BV,WACAM,SACAG,Y,QC1Ba,GACbE,YAVkBrB,YAAa,qBAAqB,SAACsB,EAAOC,GAAR,MAAuB,CAC3ER,QAAS,CACPO,MAAO,CACLC,WAAW,EACXC,YAAa,eCYbA,EAAcb,YAClB,CAAEa,YAAa,SADgB,eAG5BC,EAAaJ,aAjBE,SAAAR,GAClB,OAAO,2BACFA,GADL,IAEEW,YAAmC,UAAtBX,EAAMW,YAA0B,OAAS,cAkBpDD,EAAYZ,YAChB,CAAEY,WAAW,GADgB,eAG1BE,EAAaJ,aAjBI,SAAAR,GACpB,OAAO,2BACFA,GADL,IAEEU,WAAYV,EAAMU,gBAkBPH,cAAgB,CAC7BI,cACAD,c,iBCrBaG,EARDC,YAAe,CAC3BC,QAAS,CACPlB,SAAUmB,EACVP,MAAOQ,EACPC,WAAW,GAAD,mBAAMC,eAAN,CAA8BC,S,8CCPtCC,EAAc,SAAArB,GAAK,OAAIA,EAAMH,SAASA,UACtCyB,EAAY,SAAAtB,GAAK,OAAIA,EAAMH,SAASM,QAY3B,GACboB,WAZiB,SAAAvB,GAAK,OAAIA,EAAMH,SAASS,SAazCe,cACAC,YACAE,mBAbyBC,YACzB,CAACJ,EAAaC,IACd,SAACzB,EAAUM,GACT,OAAON,EAASM,QAAO,SAAAC,GAAO,OAC5BA,EAAQsB,KAAKC,cAAcC,SAASzB,EAAOwB,sB,iBCPjDE,IAAMC,SAASC,QAAU,wBAEzB,IA2Be,GACbC,WA5BiB,SAACN,EAAMO,GAAP,OAAkB,SAAAC,GACnCA,EAASnC,EAAgBb,qBAEzB2C,IACGM,KAAK,YAAa,CAAET,OAAMO,WAC1BG,MAAK,SAAAC,GAAG,OAAIH,EAASnC,EAAgBX,kBAAkBiD,EAAIC,UAC3DC,OAAM,SAAAC,GAAK,OAAIN,EAASnC,EAAgBV,gBAAgBmD,SAuB3DC,cApBoB,kBAAM,SAAAP,GAC1BA,EAASnC,EAAgBT,wBAEzBuC,IACGa,IAAI,aACJN,MAAK,gBAAGE,EAAH,EAAGA,KAAH,OAAcJ,EAASnC,EAAgBR,qBAAqB+C,OACjEC,OAAM,SAAAC,GAAK,OAAIN,EAASnC,EAAgBP,mBAAmBgD,SAe9DG,cAZoB,SAAAtC,GAAE,OAAI,SAAA6B,GAC1BA,EAASnC,EAAgBN,wBAEzBoC,IACGe,OADH,oBACuBvC,IACpB+B,MAAK,kBAAMF,EAASnC,EAAgBL,qBAAqBW,OACzDkC,OAAM,SAAAC,GAAK,OAAIN,EAASnC,EAAgBJ,mBAAmB6C,U,iBCnB1DK,G,kNAKJ7C,MAAQ,CACN0B,KAAM,GACNO,OAAQ,I,EAGVa,aAAe,YAAkC,IAAD,IAA9BC,OAAUC,EAAoB,EAApBA,MAAOtB,EAAa,EAAbA,KACjC,EAAKuB,SAAL,eAAiBvB,EAAOsB,K,EAG1BE,aAAe,SAAAC,GACbA,EAAEC,iBADgB,MAEO,EAAKpD,MAAtB0B,EAFU,EAEVA,KAAMO,EAFI,EAEJA,OACO,EAAKoB,MAAlBxD,SACKyD,MAAK,SAAAlD,GAAO,OAAIA,EAAQsB,OAASA,MAC5C6B,IAAMC,YACND,IAAMf,MAAMd,EAAI,2BAEhB,EAAK2B,MAAMI,aAAa/B,EAAMO,GAGhC,EAAKyB,S,EAGPA,MAAQ,WACN,EAAKT,SAAS,CAAEvB,KAAM,GAAIO,OAAQ,M,uDAG1B,IAAD,EACkB0B,KAAK3D,MAAtB0B,EADD,EACCA,KAAMO,EADP,EACOA,OAEd,OACE,0BAAM2B,SAAUD,KAAKT,aAAcW,UAAWC,IAAOC,MACnD,6BACE,2BAAOF,UAAWC,IAAOE,WAAzB,OAEE,2BACEH,UAAWC,IAAOG,UAClBC,KAAK,OACLlB,MAAOtB,EACPyC,SAAUR,KAAKb,aACfpB,KAAK,WAIX,6BACE,2BAAOmC,UAAWC,IAAOE,WAAzB,SAEE,2BACEH,UAAWC,IAAOG,UAClBC,KAAK,MACLlB,MAAOf,EACPkC,SAAUR,KAAKb,aACfpB,KAAK,aAIX,4BAAQwC,KAAK,SAASE,UAAW1C,EAAK2C,SAAWpC,EAAOoC,QAAxD,oB,GA7DkBC,cAyEpBC,EAAqB,CACzBd,aAAce,EAAmBxC,YAGpByC,eARS,SAAAzE,GAAK,MAAK,CAChCH,SAAU6E,EAAkBrD,YAAYrB,MAOFuE,EAAzBE,CAA6C5B,G,QChE7C8B,MAnBf,YAA6D,IAAlCjD,EAAiC,EAAjCA,KAAMO,EAA2B,EAA3BA,OAAQ2C,EAAmB,EAAnBA,gBACvC,OACE,yBAAKf,UAAWgB,QACd,2BACGnD,EADH,IACUO,GAEV,4BAAQ4B,UAAWiB,MAAKZ,KAAK,SAASa,QAASH,GAA/C,Y,iBC0BN,IAIML,EAAqB,CACzBK,gBAAiBJ,EAAmB7B,eAGvB8B,eARS,SAAAzE,GAAK,MAAK,CAChCH,SAAU6E,EAAkBlD,mBAAmBxB,MAOTuE,EAAzBE,EApCf,YAAqD,IAA9B5E,EAA6B,EAA7BA,SAAU+E,EAAmB,EAAnBA,gBAC/B,OACE,wBAAIf,UAAWC,IAAOkB,MACnBnF,GACCA,EAASoF,KAAI,gBAAG5E,EAAH,EAAGA,GAAIqB,EAAP,EAAOA,KAAMO,EAAb,EAAaA,OAAb,OACX,wBAAIiD,IAAK7E,GACP,kBAAC,EAAD,CACEqB,KAAMA,EACNO,OAAQA,EACR2C,gBAAiB,kBAAMA,EAAgBvE,cCS/CkE,EAAqB,CACzBY,eAAgBpF,EAAgBH,cAEnB6E,eAPS,SAACzE,GAAD,MAAY,CAClCgD,MAAO0B,EAAkBpD,UAAUtB,MAMGuE,EAAzBE,EAvBA,SAAC,GAAD,IAAGzB,EAAH,EAAGA,MAAOmC,EAAV,EAAUA,eAAV,OACb,6BACE,oDACA,2BACEjB,KAAK,OACLlB,MAAOA,EACPmB,SAAU,SAAChB,GAAD,OAAOgC,EAAehC,EAAEJ,OAAOC,cCVlCrC,EACJ,CACLyE,UAAW,QACXC,OAAQ,SAHC1E,EAKL,CACJyE,UAAW,QACXC,OAAQ,SCNG,IDUMC,IAAMC,cAAc5E,GCblB,SAAAX,GAAK,OAAIA,EAAMS,MAAME,cAG7B,GAFM,SAAAX,GAAK,OAAIA,EAAMS,MAAMC,W,oBC8B3B+D,gBALS,SAAAzE,GAAK,MAAK,CAChCS,MAAO+E,GAA8BxF,GACrCU,UAAW8E,GAA4BxF,MAG1ByE,EAvBA,SAAC,GAAD,IAAGgB,EAAH,EAAGA,SAAUhF,EAAb,EAAaA,MAAb,OACb,yBACEiF,MAAO,CACLC,WACwB,UAAtBlF,EAAME,YACFA,EAAkB0E,OAClB1E,EAAiB0E,OACvBO,MACwB,UAAtBnF,EAAME,YACFA,EAAkByE,UAClBzE,EAAiByE,WAEzBvB,UAAWC,KAAO+B,WAEjBJ,M,oBCdCK,G,uKACM,IAAD,EACmCnC,KAAKN,MAAvC5C,EADD,EACCA,MAAOD,EADR,EACQA,YAAaE,EADrB,EACqBA,UAC5B,OACE,yBACEgF,MAAO,CACLC,WACwB,UAAtBlF,EAAME,YACFA,EAAkB0E,OAClB1E,EAAiB0E,QAEzBxB,UAAWC,KAAOiC,eAElB,0BAAMlC,UAAWC,KAAOkC,QACxB,2BAAOnC,UAAWC,KAAOmC,QACvB,2BACE/B,KAAK,WACLgC,QAASxF,EAAUA,UACnByD,SAAU3D,IAEZ,0BAAMqD,UAAWC,KAAOqC,e,GApBZ7B,aAgChBC,GAAqB,CACzB/D,YAAaI,EAAaJ,aAGbiE,gBATS,SAAAzE,GAAK,MAAK,CAChCU,UAAW8E,GAA4BxF,GACvCS,MAAO+E,GAA8BxF,MAOCuE,GAAzBE,CAA6CqB,ICf7CrB,gBAJS,SAAAzE,GAAK,MAAK,CAChCH,SAAU6E,EAAkBrD,YAAYrB,MAG3ByE,EAjBH,SAAC,GAAkB,IAAhB5E,EAAe,EAAfA,SACb,OACE,kBAAC,GAAD,KACE,kBAAC,GAAD,MACA,yCACA,kBAAC,EAAD,MACCA,EAASwE,OAAS,GAAK,wCACvBxE,EAASwE,OAAS,GAAK,kBAAC,EAAD,MACxB,kBAAC,EAAD,UCdA+B,G,kLAEFzC,KAAKN,MAAMgD,oB,+BAIX,OAAO,kBAAC,GAAQ1C,KAAKN,W,GANEiB,aAcrBC,GAAqB,CACzB8B,gBAAiB7B,EAAmB/B,eAGvBgC,gBARS,SAAAzE,GAAK,MAAK,CAChCsG,kBAAmB5B,EAAkBnD,WAAWvB,MAOVuE,GAAzBE,CAA6C2B,I,MCjB5DG,IAASC,OACP,kBAAC,IAAD,CAAU3F,MAAOA,GACf,kBAAC,GAAD,OAEF4F,SAASC,eAAe,W","file":"static/js/main.03d866ec.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__3LW9_\",\"formLabel\":\"ContactForm_formLabel__2YrQM\",\"formInput\":\"ContactForm_formInput__17yLl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"themeSelector\":\"Toggler_themeSelector__2e3Hk\",\"label\":\"Toggler_label__3GHNm\",\"switch\":\"Toggler_switch__2nd8I\",\"slider\":\"Toggler_slider__3d5mo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactListItem_item__jRn0_\",\"btn\":\"ContactListItem_btn__bk9hu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__3ZjVc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Layout_container__nFnsW\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst addContactRequest = createAction('contacts/addRequest');\r\nconst addContactSuccess = createAction('contacts/addSuccess');\r\nconst addContactError = createAction('contacts/addError');\r\n\r\nconst fetchContactsRequest = createAction('contacts/fetchRequest');\r\nconst fetchContactsSuccess = createAction('contacts/fetchSuccess');\r\nconst fetchContactsError = createAction('contacts/fetchError');\r\n\r\nconst deleteContactRequest = createAction('contacts/deleteRequest');\r\nconst deleteContactSuccess = createAction('contacts/deleteSuccess');\r\nconst deleteContactError = createAction('contacts/deleteError');\r\n\r\nconst changeFilter = createAction('contacts/filter');\r\n\r\nexport default {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  changeFilter,\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport contactsActions from './contactsActions';\r\n\r\nconst addContact = (state, action) => {\r\n  return [...state, action.payload];\r\n};\r\n\r\nconst deleteContact = (state, action) => {\r\n  return state.filter(contact => contact.id !== action.payload);\r\n};\r\n\r\nconst contacts = createReducer([], {\r\n  [contactsActions.fetchContactsSuccess]: (state, action) => action.payload,\r\n  [contactsActions.addContactSuccess]: addContact,\r\n  [contactsActions.deleteContactSuccess]: deleteContact,\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [contactsActions.changeFilter]: (state, action) => action.payload,\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [contactsActions.fetchContactsRequest]: () => true,\r\n  [contactsActions.fetchContactsSuccess]: () => false,\r\n  [contactsActions.fetchContactsError]: () => false,\r\n  [contactsActions.addContactRequest]: () => true,\r\n  [contactsActions.addContactSuccess]: () => false,\r\n  [contactsActions.addContactError]: () => false,\r\n  [contactsActions.deleteContactRequest]: () => true,\r\n  [contactsActions.deleteContactSuccess]: () => false,\r\n  [contactsActions.deleteContactError]: () => false,\r\n});\r\n\r\nexport default combineReducers({\r\n  contacts,\r\n  filter,\r\n  loading,\r\n});\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst toggleTheme = createAction('theme/toggleTheme', (theme, isChecked) => ({\r\n  payload: {\r\n    theme: {\r\n      isChecked: false,\r\n      themeConfig: 'light',\r\n    },\r\n  },\r\n}));\r\n\r\nexport default {\r\n  toggleTheme,\r\n};\r\n","import { createReducer, combineReducers } from '@reduxjs/toolkit';\r\n\r\nimport themeActions from './themeActions';\r\n\r\nconst toggleTheme = state => {\r\n  return {\r\n    ...state,\r\n    themeConfig: state.themeConfig === 'light' ? 'dark' : 'light',\r\n  };\r\n};\r\n\r\nconst toggleChecked = state => {\r\n  return {\r\n    ...state,\r\n    isChecked: !state.isChecked,\r\n  };\r\n};\r\n\r\nconst themeConfig = createReducer(\r\n  { themeConfig: 'light' },\r\n  {\r\n    [themeActions.toggleTheme]: toggleTheme,\r\n  },\r\n);\r\n\r\nconst isChecked = createReducer(\r\n  { isChecked: false },\r\n  {\r\n    [themeActions.toggleTheme]: toggleChecked,\r\n  },\r\n);\r\n\r\nexport default combineReducers({\r\n  themeConfig,\r\n  isChecked,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport contactsReducer from './contacts/contactsReducer';\r\nimport themeReducer from './theme/themeReducer';\r\nimport logger from 'redux-logger';\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n    theme: themeReducer,\r\n    middleware: [...getDefaultMiddleware(), logger],\r\n  },\r\n});\r\n\r\nexport default store;\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getContacts = state => state.contacts.contacts;\r\nconst getFilter = state => state.contacts.filter;\r\nconst getLoading = state => state.contacts.loading;\r\n\r\nconst getVisibleContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n    );\r\n  },\r\n);\r\n\r\nexport default {\r\n  getLoading,\r\n  getContacts,\r\n  getFilter,\r\n  getVisibleContacts,\r\n};\r\n","import axios from 'axios';\r\nimport contactsActions from './contactsActions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:2000';\r\n\r\nconst addContact = (name, number) => dispatch => {\r\n  dispatch(contactsActions.addContactRequest());\r\n\r\n  axios\r\n    .post('/contacts', { name, number })\r\n    .then(res => dispatch(contactsActions.addContactSuccess(res.data)))\r\n    .catch(error => dispatch(contactsActions.addContactError(error)));\r\n};\r\n\r\nconst fetchContacts = () => dispatch => {\r\n  dispatch(contactsActions.fetchContactsRequest());\r\n\r\n  axios\r\n    .get('/contacts')\r\n    .then(({ data }) => dispatch(contactsActions.fetchContactsSuccess(data)))\r\n    .catch(error => dispatch(contactsActions.fetchContactsError(error)));\r\n};\r\n\r\nconst deleteContact = id => dispatch => {\r\n  dispatch(contactsActions.deleteContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(contactsActions.deleteContactSuccess(id)))\r\n    .catch(error => dispatch(contactsActions.deleteContactError(error)));\r\n};\r\n\r\nexport default {\r\n  addContact,\r\n  fetchContacts,\r\n  deleteContact,\r\n};\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { toast } from 'react-toastify';\r\nimport { connect } from 'react-redux';\r\nimport contactsSelectors from '../../redux/contacts/contactsSelectors';\r\nimport contactsOperations from '../../redux/contacts/contactsOperations';\r\n\r\nimport styles from './ContactForm.module.css';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nclass ContactForm extends Component {\r\n  static propTypes = {\r\n    onAddContact: PropTypes.func.isRequired,\r\n  };\r\n\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  handleChange = ({ target: { value, name } }) => {\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const { name, number } = this.state;\r\n    const { contacts } = this.props;\r\n    if (contacts.some(contact => contact.name === name)) {\r\n      toast.configure();\r\n      toast.error(name + ` is alredy in contacts`);\r\n    } else {\r\n      this.props.onAddContact(name, number);\r\n    }\r\n\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n\r\n    return (\r\n      <form onSubmit={this.handleSubmit} className={styles.form}>\r\n        <div>\r\n          <label className={styles.formLabel}>\r\n            Name\r\n            <input\r\n              className={styles.formInput}\r\n              type=\"text\"\r\n              value={name}\r\n              onChange={this.handleChange}\r\n              name=\"name\"\r\n            />\r\n          </label>\r\n        </div>\r\n        <div>\r\n          <label className={styles.formLabel}>\r\n            Number\r\n            <input\r\n              className={styles.formInput}\r\n              type=\"tel\"\r\n              value={number}\r\n              onChange={this.handleChange}\r\n              name=\"number\"\r\n            />\r\n          </label>\r\n        </div>\r\n        <button type=\"submit\" disabled={!name.length || !number.length}>\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: contactsSelectors.getContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onAddContact: contactsOperations.addContact,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { item, btn } from \"./ContactListItem.module.css\";\r\n\r\nfunction ContactListItem({ name, number, onDeleteContact }) {\r\n  return (\r\n    <div className={item}>\r\n      <p>\r\n        {name}:{number}\r\n      </p>\r\n      <button className={btn} type=\"button\" onClick={onDeleteContact}>\r\n        Delete\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nContactListItem.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactListItem;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport contactsSelectors from '../../redux/contacts/contactsSelectors';\r\nimport contactsOperations from '../../redux/contacts/contactsOperations';\r\nimport ContactListItem from '../ContactListItem/ContactListItem';\r\nimport styles from './ContactList.module.css';\r\n\r\nfunction ContactList({ contacts, onDeleteContact }) {\r\n  return (\r\n    <ul className={styles.list}>\r\n      {contacts &&\r\n        contacts.map(({ id, name, number }) => (\r\n          <li key={id}>\r\n            <ContactListItem\r\n              name={name}\r\n              number={number}\r\n              onDeleteContact={() => onDeleteContact(id)}\r\n            />\r\n          </li>\r\n        ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ).isRequired,\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: contactsSelectors.getVisibleContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onDeleteContact: contactsOperations.deleteContact,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport contactsActions from \"../../redux/contacts/contactsActions\";\r\nimport contactsSelectors from \"../../redux/contacts/contactsSelectors\";\r\n\r\nconst Filter = ({ value, onChangeFilter }) => (\r\n  <div>\r\n    <p>Find contacts by name</p>\r\n    <input\r\n      type=\"text\"\r\n      value={value}\r\n      onChange={(e) => onChangeFilter(e.target.value)}\r\n    />\r\n  </div>\r\n);\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChangeFilter: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  value: contactsSelectors.getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onChangeFilter: contactsActions.changeFilter,\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from 'react';\r\n\r\nexport const themeConfig = {\r\n  light: {\r\n    fontColor: 'black',\r\n    bodyBg: 'white',\r\n  },\r\n  dark: {\r\n    fontColor: 'white',\r\n    bodyBg: 'black',\r\n  },\r\n};\r\n\r\nconst ThemeContext = React.createContext(themeConfig.light);\r\nexport default ThemeContext;\r\n","const getThemeConfig = state => state.theme.themeConfig;\r\nconst getIsChecked = state => state.theme.isChecked;\r\n\r\nexport default {\r\n  getThemeConfig,\r\n  getIsChecked,\r\n};\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { themeConfig } from '../../context/ThemeContext';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport themeSelectors from '../../redux/theme/themeSelectors';\r\n\r\nimport styles from './Layout.module.css';\r\nconst Layout = ({ children, theme }) => (\r\n  <div\r\n    style={{\r\n      background:\r\n        theme.themeConfig === 'light'\r\n          ? themeConfig.light.bodyBg\r\n          : themeConfig.dark.bodyBg,\r\n      color:\r\n        theme.themeConfig === 'light'\r\n          ? themeConfig.light.fontColor\r\n          : themeConfig.dark.fontColor,\r\n    }}\r\n    className={styles.container}\r\n  >\r\n    {children}\r\n  </div>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  theme: themeSelectors.getThemeConfig(state),\r\n  isChecked: themeSelectors.getIsChecked(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(Layout);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport styles from './Toggler.module.css';\r\nimport themeActions from '../../redux/theme/themeActions';\r\nimport themeSelectors from '../../redux/theme/themeSelectors';\r\nimport { themeConfig } from '../../context/ThemeContext';\r\n\r\nclass Toggler extends Component {\r\n  render() {\r\n    const { theme, toggleTheme, isChecked } = this.props;\r\n    return (\r\n      <div\r\n        style={{\r\n          background:\r\n            theme.themeConfig === 'light'\r\n              ? themeConfig.light.bodyBg\r\n              : themeConfig.dark.bodyBg,\r\n        }}\r\n        className={styles.themeSelector}\r\n      >\r\n        <span className={styles.label}></span>\r\n        <label className={styles.switch}>\r\n          <input\r\n            type=\"checkbox\"\r\n            checked={isChecked.isChecked}\r\n            onChange={toggleTheme}\r\n          />\r\n          <span className={styles.slider}></span>\r\n        </label>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isChecked: themeSelectors.getIsChecked(state),\r\n  theme: themeSelectors.getThemeConfig(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  toggleTheme: themeActions.toggleTheme,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Toggler);\r\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\nimport Layout from './components/Layout/Layout';\nimport Toggler from './components/Toggler/Toggler';\nimport contactsSelectors from './redux/contacts/contactsSelectors';\n\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst App = ({ contacts }) => {\n  return (\n    <Layout>\n      <Toggler />\n      <h1>Phonebook</h1>\n      <ContactForm />\n      {contacts.length > 0 && <h2>Contacts</h2>}\n      {contacts.length > 2 && <Filter />}\n      <ContactList />\n    </Layout>\n  );\n};\n\nconst mapStateToProps = state => ({\n  contacts: contactsSelectors.getContacts(state),\n});\n\nexport default connect(mapStateToProps)(App);\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport App from './App';\r\nimport contactsOperations from './redux/contacts/contactsOperations';\r\nimport contactsSelectors from './redux/contacts/contactsSelectors';\r\n\r\nclass AppContainer extends Component {\r\n  componentDidMount() {\r\n    this.props.onFetchContacts();\r\n  }\r\n\r\n  render() {\r\n    return <App {...this.props} />;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isLoadingContacts: contactsSelectors.getLoading(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onFetchContacts: contactsOperations.fetchContacts,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AppContainer);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport App from './AppContainer';\nimport './index.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}